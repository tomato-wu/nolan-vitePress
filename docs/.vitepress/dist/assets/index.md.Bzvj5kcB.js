import{_ as t,c as e,o as l,a2 as s}from"./chunks/framework.CCEYTIEm.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"<span style=\\"background-clip: text !important;background: -webkit-linear-gradient(120deg, #8e5cd9 20%, #5672cd 70%);-webkit-background-clip: text;-webkit-text-fill-color: var(--vp-home-hero-name-background);\\">Nolan 的前端小册</span>","tagline":"<span style=\\"color:var(--vp-home-hero-name-color);font-size: 25px\\">\\"全面介绍前端技术栈、实用工具和最佳实践，助您迈向高效编程之路。\\"</span>","actions":[{"theme":"brand","text":"快速上手","link":"/ReactDocs/react-docs"},{"theme":"alt","text":"我的掘金","link":"https://juejin.cn/user/2841599197616894/posts"}]},"features":[{"title":"运行速度提升","details":"结合智研 CI 天生的调度能力，通过编排使得测试案例可以<strong>高效分解与并行执行</strong>，大幅提升测试效率。"},{"title":"测试结果推送","details":"提供<strong>包含丰富上下文信息</strong>的详细测试结果报告推送到企微、包括 <strong>UI 截图和 AI 智能排障建议</strong>，为快速定位和解决问题提供强有力的支持。"},{"title":"研发流程集成","details":"1. 预发布测试：<strong>发布前作为质量保障的关键环节</strong>，可用卡尔确保现有功能在预览环境下达到预期；<br/>2. 持续监控测试：在<strong>发布后定期监控</strong>，及时关注和解决问题变更。"}]},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),o={name:"index.md"},i=s('<div class="info custom-block"><p class="custom-block-title"><span style="font-size:16px;">实际问题的解决</span>, 在前端开发中，我们常常会遇到：</p><ol><li>现网非代码导致的 UI 变更(配置更改或接口字段更改)，前端监控无感知(页面并未报错)、无上报、无关注，很大概率意味着用户能感知到、对体验不满；</li><li>开发/发布前需要人为把控质量，效率不高且容易遗漏，如不幸有 Bug 将无法及时被反馈，走到发布中/后阶段再修改成本变高；</li><li>了解可以使用 <a href="https://pptr.dev/" target="_blank" rel="noreferrer">Jest</a>、<a href="https://pptr.dev/" target="_blank" rel="noreferrer">Puppeteer</a> 测试工具和库，但开发过程中面临不少实际问题；<details class="details custom-block"><summary>这里收集了一些我们在完善卡尔时遇到过的问题、踩过的坑</summary><ul><li>如何实现密钥管理，如何实现多账号登录并保存登录态？</li><li>到了真正可用时，需要考虑 Puppeteer 如何在流水线跑起来，可能需要容器化？</li><li>测试结果如何直观展现帮助错误排查，结果托管在哪里，可以实现日志和告警功能吗？</li><li>具体到控制台、购买页的测试，很多需要指定 Hosts 配置进行预览，如何支持这个能力？</li></ul></details></li></ol><div class="tip custom-block"><p class="custom-block-title">Why Carl(卡尔)? 卡尔是一个 <span style="color:var(--vp-c-important-3);">&quot;贴合内网基础设施的 UI 和 端到端测试能力集成&quot;</span>，是我们解决以上问题的一个尝试，现已投入日常研发流程使用</p><details class="details custom-block"><summary>点击详细了解卡尔的是如何解决以上三个问题的</summary><ol><li>我们使用 Puppeteer 进行自动化的端到端（E2E）测试，模拟用户操作以确保从前端到后端的完整流程正常工作。这些测试定期在 CI 中执行，帮助我们快速发现并解决生产环境中的问题；</li><li>我们选用 Jest 作为测试框架，在发布前或开发中执行测试用例，进行严格质量把关；同时我们将 Puppeteer 与 Jest 集成，方便统一用例编写和结果输出；</li><li>实际落地和部署时，我们结合了公司内部成熟的工程生态；<div class="info custom-block"><p class="custom-block-title">我们将卡尔集成到了七彩石、智妍 QCI、CLS 等工具中：</p><ul><li>选用七彩石进行密钥管理、配置下发，各种错误白名单配置;</li><li>用自定义镜像在智研 CI 上成功运行 Puppeteer，提前安装好 Chrome 和各种系统依赖；</li><li>用智研结果目录托管测试结果、混元分析失败案例报错并推送到企微群，如有报错，AI 指引;</li><li>设定 TKEX 定时任务拉取测试日志，保存 JSON 文件以被 CLS 采集，并配置 CLS 告警策略;</li><li>动态编辑 Hosts 文件模拟发布前多地狱(DNS 解析到不同地域的机器上)、多环境预览，作为发布质量门禁；</li></ul></div></li></ol></details></div></div>',1),a=[i];function r(n,c,p,d,u,m){return l(),e("div",null,a)}const h=t(o,[["render",r]]);export{g as __pageData,h as default};
